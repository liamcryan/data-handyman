<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Data Handyman</title>
    <link>http://data-handyman.com/blog/</link>
    <description>Recent content in Blog on Data Handyman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://data-handyman.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading and Writing (2)</title>
      <link>http://data-handyman.com/blog/python-read-write-files2/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-read-write-files2/</guid>
      <description>The csv module I want to take a look at understanding the importance of the csv module, as well as when and why it should be used.
Creating a csv file (the old fashioned way) I am going to use the code below to create a csv file, f. You can copy and paste this code below to follow along. If you remember the last post, this should look very familiar.</description>
    </item>
    
    <item>
      <title>Reading and Writing</title>
      <link>http://data-handyman.com/blog/python-read-write-files/</link>
      <pubDate>Wed, 04 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-read-write-files/</guid>
      <description>Background I have taken for granted the ability to read and write files in Python. There are libraries which make this task very easy, and it is easy to not really understand what is going on. This purpose of this post is to help me to better understand reading and writing to files. Let&amp;rsquo;s start with the built in Python function, open.
open open is a built in Python function which basically opens a connection to your file and let&amp;rsquo;s you interact with the data in the file.</description>
    </item>
    
    <item>
      <title>Python-pptx workaround functions tutorial</title>
      <link>http://data-handyman.com/blog/python-pptx-workaround-function/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-pptx-workaround-function/</guid>
      <description>The wonderful world of data visualization using PowerPoint If you have ever tried to create PowerPoints using Python, you have probably run into Python-pptx library. It is a great tool for helping you create PowerPoint presentations. You can theoritically replicate anything in any PowerPoint using this library (statement not fact chcecked). In practice, the library has limitations and you may find yourself googling how to do something that the library is not capable of doing.</description>
    </item>
    
    <item>
      <title>Taking your first step</title>
      <link>http://data-handyman.com/blog/taking-your-first-step/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/taking-your-first-step/</guid>
      <description>Starting out I really started my career as a data analyst. About a year or so after my start date, a great coworker came along who told me he was learning Python. He was writing scripts that made my VBA scripts look like a joke. So I wanted to learn too.
This coworker/friend came up with a cool idea to make a little money on the side. We were going to create a Python program to automate some of the tedious aspects of buying and selling products online.</description>
    </item>
    
    <item>
      <title>Pdf Repository Viewer</title>
      <link>http://data-handyman.com/blog/pdf-repo-viewer/</link>
      <pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/pdf-repo-viewer/</guid>
      <description>From PPTX to PDF In the last post, I talked about how to programmatically create Power Point Presentations. It was great fun and today&amp;rsquo;s topic is somewhat of a logical continuation.
The problem with pptx files is that they appear slightly differnetly depending upon the program that opens the file. I found this out as I was neatly crafting the sizes of my charts and tables, only to find that when I opened it with Microsoft PowerPoint they looked very wrong.</description>
    </item>
    
    <item>
      <title>Python-pptx Tables</title>
      <link>http://data-handyman.com/blog/python-pptx/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-pptx/</guid>
      <description>Power Point is where it&amp;rsquo;s at people Something like this happened recently:  A weekly PowerPoint presentation that relies on some data processing is created. The process of creating this PowerPoint is a mixture of manual and automated methods. My boss says,
&amp;ldquo;Hey, we have been asked to put the contents of the weekly PowerPoint presentation into a mobile app.&amp;rdquo;
&amp;ldquo;How exciting,&amp;rdquo; I exclaim&amp;hellip;but I realize our current data flow is not good enough.</description>
    </item>
    
    <item>
      <title>Google Calendar - part 2</title>
      <link>http://data-handyman.com/blog/python-google-calendar2/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-google-calendar2/</guid>
      <description>Google Calendar and Python - Part 2 Let&amp;rsquo;s get to the good stuff.
Last time we set up everything we needed so that we could interact with the Google Calendar API. I wanted to use data from a Formspree email to create an event in my Google Calendar.
To get the data, I ran the code from last time which I saved here on github:
if __name__ == &amp;quot;__main__&amp;quot;: email_info = get_formspree_email_info() print(email)  The result was:</description>
    </item>
    
    <item>
      <title>Google Calendar - part 1</title>
      <link>http://data-handyman.com/blog/python-google-calendar1/</link>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-google-calendar1/</guid>
      <description>Google Calendar and Python Last time we talked about how to search Gmail for a specific email. Then we found specific items within the email and created and sent our own email. And all through Python using the smtplib and imaplib libraries!!!!! If that doesn&amp;rsquo;t sound really interesting, next time I&amp;rsquo;ll use more exclamation marks.
This time we want to create an event in Google Calendar through Python. A really good reference is Google&amp;rsquo;s Calendar API quickstart tutorial.</description>
    </item>
    
    <item>
      <title>Python Gmail - part 2</title>
      <link>http://data-handyman.com/blog/python-gmail2/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-gmail2/</guid>
      <description>Gmail and Python (part 2) Last time we went over the required steps for getting Python to interact with Gmail. They are:
1) Enable 2 step authentication
2) Create an app password
Finally! Let&amp;rsquo;s get to the data! I want to go over how to get a Formspree email and then send a response to the sender. To search for an email we will be using the imaplib library, and to send, we&amp;rsquo;ll use the smtplib library.</description>
    </item>
    
    <item>
      <title>Python Gmail - part 1</title>
      <link>http://data-handyman.com/blog/python-gmail1/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/python-gmail1/</guid>
      <description>Gmail and Python In the last post I mentioned that I wanted to organize the data received from the contact form. If you don&amp;rsquo;t remember, the important thing to know is that the form on my Contact page is sent to my Gmail account via a service called Formspree.
To do this automatically, I will use Python, my favorite programming language. Getting Python to interact with Gmail was not too difficut.</description>
    </item>
    
    <item>
      <title>Formspree?</title>
      <link>http://data-handyman.com/blog/formspree/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://data-handyman.com/blog/formspree/</guid>
      <description>Why Formspree? Creating a form itself isn&amp;rsquo;t too complicated or interesting to me. What interests me about creating forms is the &amp;lsquo;action&amp;rsquo; taken once you press the submit button.
I want to be able to respond to the person who is contacting me. So, the &amp;lsquo;action&amp;rsquo; I am looking for the form to take is to email. In a later section, I want to go over organizing this data, but the first step is receiving it.</description>
    </item>
    
  </channel>
</rss>